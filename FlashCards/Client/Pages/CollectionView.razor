@using FlashCards.Client.Components
@inject HttpClient _httpClient
@inject NavigationManager _navManager
@inject DialogService _dialogService
@page "/Collections/{Id}"

@if (_loading)
{
    <div class="loaderFlex">
        <Loader />
    </div>
}
else
{
    <div class="contentRootContainer">
        <div class="contentHeader">
            <div class="collectionHeaderTitle">
                <h2>
                    @_collection.CollectionName&nbsp;<span>@($"({_collection.DeckIds.Count} decks)")</span>&nbsp;<span>@($"({_collection.CardCount} cards)")</span>
                </h2>
            </div>
            <div class="collectionHeaderButtons">
                <button class="positive" @onclick="NewCardClicked" disabled="@(_loading || !string.IsNullOrWhiteSpace(_errorMessage))">Add Card</button>
                <button class="positive" @onclick="OnPlayClicked" disabled="@(_loading || !string.IsNullOrWhiteSpace(_errorMessage))">Play</button>
                <button class="positive" @onclick="() => {}" disabled="@(_loading || !string.IsNullOrWhiteSpace(_errorMessage))">History</button>
            </div>
        </div>
        @if (!string.IsNullOrWhiteSpace(_errorMessage))
        {
            <div class="marginAuto error">
                @_errorMessage
            </div>
        }
        else
        {
            <div class="contentContainer">
                @foreach (var card in _cards.Cards)
                {
                    <div class="cardListing" @onclick="() => CardClicked(card.Id)">
                        @if (card.Loading)
                        {
                            <div class="cardLoading">
                                <Loader />
                            </div>
                        }
                        else
                        {
                            <div class="cardEditIcon" @onclick="() => EditClicked(card.Id)" @onclick:stopPropagation="true">
                                <span class="symbol">edit_note</span>
                            </div>
                            <div class="@($"cardValues {(card.Flipped ? "cardFlipped" : "")}")">
                                <div class="cardValueContainer">
                                    <div class="@($"cardValue cardFront {(card.Flipped ? "" : "sideDisplay")}")">
                                        @card.FrontValue
                                    </div>
                                </div>
                                <div class="cardValueContainer">
                                    <div class="@($"cardValue cardBack {(card.Flipped ? "sideDisplay" : "")}")">
                                        @card.BackValue
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
}