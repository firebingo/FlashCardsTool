@using System.ComponentModel.DataAnnotations;
@using System.Text;
@using System.Text.Json;
@inject HttpClient _httpClient
@inject NavigationManager _navManager
@page "/Login"

<div class="loginContainer">
    <EditForm EditContext="@_editContext" OnSubmit="@Submit">
        <DataAnnotationsValidator />
        <div class="inputField">
            <label>Username/Email:</label>
            <InputText @bind-Value="Model!.Username" />
            <div class="inputFieldError">
                <ValidationMessage For="@(() => Model!.Username)" />
            </div>
        </div>
        <div class="inputField">
            <label>Password:</label>
            <InputText type="password" @bind-Value="Model!.Password" />
            <div class="inputFieldError">
                <ValidationMessage For="@(() => Model!.Password)" />
            </div>
        </div>
        @if (!string.IsNullOrWhiteSpace(_errorMessage))
        {
            <div class="loginError validation-message">@_errorMessage</div>
        }
        <button type="submit" class="positive loginButton">Login</button>
    </EditForm>
    @if (CanRegister)
    {
        <div class="registerButtonContainer">
            <button class="positive" @onclick="OnRegisterClicked">Register</button>
        </div>
    }
</div>

@code {
    private string _errorMessage = string.Empty;
    private EditContext? _editContext;

    public LoginFormModel? Model { get; set; }
    public bool CanRegister { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var authCheck = await _httpClient.GetAsync("api/Account/CheckUserAuth");
        if (authCheck.IsSuccessStatusCode)
        {
            _navManager.NavigateTo("/Decks");
            return;
        }

        using var regRes = await _httpClient.GetAsync("api/Account/CheckCanRegister");
        var regS = await regRes.Content.ReadAsStringAsync();
        var regInfo = JsonSerializer.Deserialize<StandardResponse<CanRegisterResponse>>(regS);
        CanRegister = regInfo?.Success ?? false;
        Model ??= new LoginFormModel();
        _editContext = new EditContext(Model);
    }

    private async Task Submit()
    {
        _errorMessage = string.Empty;
        if (!_editContext!.Validate())
        {
            return;
        }
        var isEmail = RegexUtil.SimpleEmailRegex().IsMatch(Model!.Username);
        var postModel = new LoginRequest()
            {
                UserName = isEmail ? null : Model!.Username,
                Email = isEmail ? Model!.Username : null,
                Password = Model!.Password
            };
        using var content = new StringContent(JsonSerializer.Serialize(postModel, DefaultJsonOptions.DefaultOptions), Encoding.UTF8, "application/json");
        using var loginRes = await _httpClient.PostAsync("api/Account/Login", content);
        if (!loginRes.IsSuccessStatusCode)
        {
            _errorMessage = "Invalid login";
            return;
        }
        _navManager.NavigateTo("/Decks");
    }

    private void OnRegisterClicked()
    {
        _navManager.NavigateTo("/Register");
    }

    public class LoginFormModel
    {
        [Required(ErrorMessage = "Required")]
        [StringLength(128, ErrorMessage = "Max length of 128")]
        public string Username { get; set; } = string.Empty;
        [Required(ErrorMessage = "Required")]
        public string Password { get; set; } = string.Empty;
    }
}
